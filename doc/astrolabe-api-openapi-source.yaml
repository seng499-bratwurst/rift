x-generator: NSwag v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))
openapi: 3.0.0
info:
  title: Rift API
  description: The backend API for the ONC chatbot
  version: v1
servers:
  - url: 'http://localhost:5000'
paths:
  /api/register:
    post:
      tags:
        - Auth
      operationId: Auth_Register
      requestBody:
        x-name: model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterModel'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/login:
    post:
      tags:
        - Auth
      operationId: Auth_Login
      requestBody:
        x-name: model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginModel'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/me:
    get:
      tags:
        - Auth
      operationId: Auth_Me
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/conversations:
    get:
      tags:
        - Conversation
      operationId: Conversation_GetConversations
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/api/conversations/{conversationId}':
    delete:
      tags:
        - Conversation
      operationId: Conversation_DeleteConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/password:
    patch:
      tags:
        - Password
      operationId: Password_PasswordReset
      requestBody:
        x-name: model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetModel'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/sessional-keys:
    get:
      tags:
        - SessionalKey
      operationId: SessionalKey_GetSessionalKeyForGuest
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/users:
    patch:
      tags:
        - User
      operationId: User_UpdateUser
      requestBody:
        x-name: userUpdate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/company-token:
    post:
      tags:
        - CompanyToken
      operationId: CompanyToken_SetCompanyToken
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyTokenRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/files:
    post:
      tags:
        - File
      operationId: File_UploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                ContentType:
                  type: string
                  nullable: true
                ContentDisposition:
                  type: string
                  nullable: true
                Headers:
                  type: array
                  nullable: true
                  items: {}
                Length:
                  type: integer
                  format: int64
                Name:
                  type: string
                  nullable: true
                FileName:
                  type: string
                  nullable: true
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    get:
      tags:
        - File
      operationId: File_GetAllFiles
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileEntityDto'
  '/api/files/{id}':
    delete:
      tags:
        - File
      operationId: File_DeleteFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/LLM/ask:
    post:
      tags:
        - LLM
      operationId: LLM_Ask
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/messages:
    post:
      tags:
        - Message
      operationId: Message_CreateMessage
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/messages/guest:
    post:
      tags:
        - Message
      operationId: Message_CreateGuestMessage
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/api/conversations/{conversationId}/messages':
    get:
      tags:
        - Message
      operationId: Message_GetMessages
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/api/messages/{messageId}':
    patch:
      tags:
        - Message
      operationId: Message_UpdateMessageCoordinates
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoordinatesRequest'
        required: true
        x-position: 2
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    delete:
      tags:
        - Message
      operationId: Message_DeleteMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/edges:
    post:
      tags:
        - MessageEdge
      operationId: MessageEdge_CreateEdge
      requestBody:
        x-name: edge
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageEdge'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/api/edges/{id}':
    delete:
      tags:
        - MessageEdge
      operationId: MessageEdge_DeleteEdge
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/api/conversations/{conversationId}/edges':
    get:
      tags:
        - MessageEdge
      operationId: MessageEdge_GetMessages
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: integer
            format: int32
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/ReRanker/rerank:
    post:
      tags:
        - ReRanker
      operationId: ReRanker_Rerank
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RerankRequestDto'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RerankResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: string
    get:
      tags:
        - ReRanker
      operationId: ReRanker_Test
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {}
  /api/VectorDB/documents:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_AddDocument
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/documents/batch:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_AddDocumentsBatch
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDocumentsRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfInteger'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  '/api/VectorDB/documents/{documentId}':
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          x-position: 1
        - name: collectionName
          in: query
          schema:
            type: string
            default: oceanographic_data
          x-position: 2
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfDocumentResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
    put:
      tags:
        - VectorDB
      operationId: VectorDB_UpdateDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          x-position: 1
        - name: collectionName
          in: query
          schema:
            type: string
            default: oceanographic_data
          x-position: 3
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
        required: true
        x-position: 2
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
    delete:
      tags:
        - VectorDB
      operationId: VectorDB_DeleteDocument
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          x-position: 1
        - name: collectionName
          in: query
          schema:
            type: string
            default: oceanographic_data
          x-position: 2
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/collections:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_CreateCollection
      requestBody:
        x-name: collectionInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionInfo'
        required: true
        x-position: 1
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
    get:
      tags:
        - VectorDB
      operationId: VectorDB_ListCollections
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfListOfCollectionResponse'
  '/api/VectorDB/collections/{collectionName}':
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetCollectionInfo
      parameters:
        - name: collectionName
          in: path
          required: true
          schema:
            type: string
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfCollectionResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
    delete:
      tags:
        - VectorDB
      operationId: VectorDB_DeleteCollection
      parameters:
        - name: collectionName
          in: path
          required: true
          schema:
            type: string
          x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/query:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_Query
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfQueryResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/query/semantic:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_SemanticQuery
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticQueryRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfQueryResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/query/filtered:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_FilteredQuery
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfQueryResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  '/api/VectorDB/documents/{documentId}/similar':
    get:
      tags:
        - VectorDB
      operationId: VectorDB_FindSimilarDocuments
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          x-position: 1
        - name: collectionName
          in: query
          schema:
            type: string
            default: oceanographic_data
          x-position: 2
        - name: nResults
          in: query
          schema:
            type: integer
            format: int32
            default: 5
            maximum: 50
            minimum: 1
          x-position: 3
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfSimilarDocumentsResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/rag/context:
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetRAGContext
      parameters:
        - name: query
          in: query
          schema:
            type: string
          x-position: 1
        - name: maxResults
          in: query
          schema:
            type: integer
            format: int32
            default: 5
            maximum: 20
            minimum: 1
          x-position: 2
        - name: similarityThreshold
          in: query
          schema:
            type: number
            format: double
            default: 0.3
            maximum: 1
            minimum: 0
          x-position: 3
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfRAGContext'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/rag/oceanographic:
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetOceanographicRAGContext
      parameters:
        - name: query
          in: query
          schema:
            type: string
          x-position: 1
        - name: dataType
          in: query
          schema:
            type: string
            nullable: true
          x-position: 2
        - name: location
          in: query
          schema:
            type: string
            nullable: true
          x-position: 3
        - name: instrumentType
          in: query
          schema:
            type: string
            nullable: true
          x-position: 4
        - name: maxResults
          in: query
          schema:
            type: integer
            format: int32
            default: 5
            maximum: 20
            minimum: 1
          x-position: 5
        - name: similarityThreshold
          in: query
          schema:
            type: number
            format: double
            default: 0.7
            maximum: 1
            minimum: 0
          x-position: 6
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfRAGContext'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/health:
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetHealth
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfHealthResponse'
        '503':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/stats:
    get:
      tags:
        - VectorDB
      operationId: VectorDB_GetStats
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfStatsResponse'
  /api/VectorDB/embeddings:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_GenerateEmbeddings
      requestBody:
        x-name: texts
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfEmbeddingResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorDBResponseOfString'
  /api/VectorDB/add:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_AddLegacy
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: string
      deprecated: true
  /api/VectorDB/query/legacy:
    post:
      tags:
        - VectorDB
      operationId: VectorDB_QueryLegacy
      requestBody:
        x-name: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
        x-position: 1
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema: {}
      deprecated: true
components:
  schemas:
    RegisterModel:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        oncApiToken:
          type: string
          nullable: true
    LoginModel:
      type: object
      additionalProperties: false
      properties:
        email:
          type: string
        password:
          type: string
    PasswordResetModel:
      type: object
      additionalProperties: false
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        newPasswordConfirmed:
          type: string
    UserUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        oncApiToken:
          type: string
          nullable: true
    CreateCompanyTokenRequest:
      type: object
      additionalProperties: false
      properties:
        companyName:
          type: string
        oncApiToken:
          type: string
          nullable: true
        usage:
          type: integer
          format: int32
    FileEntityDto:
      type: object
      additionalProperties: false
      required:
        - fileName
        - uploadedBy
      properties:
        id:
          type: integer
          format: int32
        fileName:
          type: string
          maxLength: 255
          minLength: 1
        createdAt:
          type: string
          format: date-time
        uploadedBy:
          type: string
          minLength: 1
    PromptRequest:
      type: object
      additionalProperties: false
      properties:
        prompt:
          type: string
    CreateMessageRequest:
      type: object
      additionalProperties: false
      properties:
        conversationId:
          type: integer
          format: int32
          nullable: true
        content:
          type: string
        xCoordinate:
          type: number
          format: float
        yCoordinate:
          type: number
          format: float
        responseXCoordinate:
          type: number
          format: float
        responseYCoordinate:
          type: number
          format: float
        sourceHandle:
          type: string
        targetHandle:
          type: string
        sessionId:
          type: string
          nullable: true
        sources:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/PartialMessageEdge'
    PartialMessageEdge:
      type: object
      additionalProperties: false
      properties:
        sourceMessageId:
          type: integer
          format: int32
        sourceHandle:
          type: string
        targetHandle:
          type: string
    UpdateCoordinatesRequest:
      type: object
      additionalProperties: false
      properties:
        xCoordinate:
          type: number
          format: float
        yCoordinate:
          type: number
          format: float
    MessageEdge:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          format: int32
        sourceMessageId:
          type: integer
          format: int32
        targetMessageId:
          type: integer
          format: int32
        sourceHandle:
          type: string
        targetHandle:
          type: string
    RerankResponse:
      type: object
      additionalProperties: false
      properties:
        reranked_Docs:
          type: array
          nullable: true
          items:
            type: string
    RerankRequestDto:
      type: object
      additionalProperties: false
      required:
        - query
        - docs
      properties:
        query:
          type: string
          minLength: 1
        docs:
          type: array
          items:
            type: string
    VectorDBResponseOfString:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    AddRequest:
      type: object
      additionalProperties: false
      required:
        - id
        - text
      properties:
        id:
          type: string
          minLength: 1
        text:
          type: string
          minLength: 1
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
        collection_name:
          type: string
    VectorDBResponseOfInteger:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    BatchDocumentsRequest:
      type: object
      additionalProperties: false
      required:
        - documents
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        collection_name:
          type: string
    Document:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        text:
          type: string
        metadata:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/DocumentMetadata'
    DocumentMetadata:
      type: object
      additionalProperties: false
      properties:
        source:
          type: string
        data_type:
          type: string
        timestamp:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        depth:
          type: number
          format: double
          nullable: true
        instrument_type:
          type: string
          nullable: true
        tags:
          type: string
          nullable: true
    VectorDBResponseOfDocumentResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/DocumentResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    DocumentResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        document:
          type: string
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
    UpdateDocumentRequest:
      type: object
      additionalProperties: false
      properties:
        text:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
    CollectionInfo:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
    VectorDBResponseOfListOfCollectionResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/CollectionResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    CollectionResponse:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        id:
          type: string
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
        document_count:
          type: integer
          format: int32
          nullable: true
    VectorDBResponseOfCollectionResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/CollectionResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    VectorDBResponseOfQueryResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/QueryResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    QueryResponse:
      type: object
      additionalProperties: false
      properties:
        query:
          type: string
        results:
          $ref: '#/components/schemas/QueryResult'
        count:
          type: integer
          format: int32
        similarity_threshold:
          type: number
          format: double
          nullable: true
        filters:
          type: object
          nullable: true
          additionalProperties: {}
    QueryResult:
      type: object
      additionalProperties: false
      properties:
        documents:
          type: array
          items:
            type: array
            items:
              type: string
        metadatas:
          type: array
          items:
            type: array
            items:
              type: object
              nullable: true
              additionalProperties: {}
        distances:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
        ids:
          type: array
          nullable: true
          items:
            type: array
            items:
              type: string
    QueryRequest:
      type: object
      additionalProperties: false
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
        n_results:
          type: integer
          format: int32
          maximum: 50
          minimum: 1
        collection_name:
          type: string
        where:
          type: object
          nullable: true
          additionalProperties: {}
        include:
          type: array
          items:
            type: string
    SemanticQueryRequest:
      type: object
      additionalProperties: false
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
        n_results:
          type: integer
          format: int32
          maximum: 50
          minimum: 1
        collection_name:
          type: string
        similarity_threshold:
          type: number
          format: double
          maximum: 1
          minimum: 0
        where:
          type: object
          nullable: true
          additionalProperties: {}
    VectorDBResponseOfSimilarDocumentsResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/SimilarDocumentsResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    SimilarDocumentsResponse:
      type: object
      additionalProperties: false
      properties:
        reference_document_id:
          type: string
        similar_documents:
          $ref: '#/components/schemas/QueryResult'
        count:
          type: integer
          format: int32
    VectorDBResponseOfRAGContext:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/RAGContext'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    RAGContext:
      type: object
      additionalProperties: false
      properties:
        query:
          type: string
        relevantDocuments:
          type: array
          items:
            $ref: '#/components/schemas/RelevantDocument'
        apiData:
          type: object
          nullable: true
          additionalProperties: {}
        timestamp:
          type: string
          format: date-time
    RelevantDocument:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        content:
          type: string
        relevance:
          type: number
          format: double
        metadata:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/DocumentMetadata'
        source:
          type: string
    VectorDBResponseOfHealthResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/HealthResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    HealthResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        collections_count:
          type: integer
          format: int32
        version:
          type: string
    VectorDBResponseOfStatsResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/StatsResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    StatsResponse:
      type: object
      additionalProperties: false
      properties:
        total_collections:
          type: integer
          format: int32
        total_documents:
          type: integer
          format: int32
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionStatsInfo'
    CollectionStatsInfo:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        document_count:
          type: integer
          format: int32
        metadata:
          type: object
          nullable: true
          additionalProperties: {}
    VectorDBResponseOfEmbeddingResponse:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
        data:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/EmbeddingResponse'
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true
    EmbeddingResponse:
      type: object
      additionalProperties: false
      properties:
        embeddings:
          type: array
          items:
            type: array
            items:
              type: number
              format: double
        count:
          type: integer
          format: int32
        dimension:
          type: integer
          format: int32
